// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: protocol/grpc.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloServiceClient interface {
	SendPicture(ctx context.Context, opts ...grpc.CallOption) (HelloService_SendPictureClient, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) SendPicture(ctx context.Context, opts ...grpc.CallOption) (HelloService_SendPictureClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloService_ServiceDesc.Streams[0], "/protocol.HelloService/SendPicture", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceSendPictureClient{stream}
	return x, nil
}

type HelloService_SendPictureClient interface {
	Send(*Picture) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type helloServiceSendPictureClient struct {
	grpc.ClientStream
}

func (x *helloServiceSendPictureClient) Send(m *Picture) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceSendPictureClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
// All implementations must embed UnimplementedHelloServiceServer
// for forward compatibility
type HelloServiceServer interface {
	SendPicture(HelloService_SendPictureServer) error
	mustEmbedUnimplementedHelloServiceServer()
}

// UnimplementedHelloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (UnimplementedHelloServiceServer) SendPicture(HelloService_SendPictureServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPicture not implemented")
}
func (UnimplementedHelloServiceServer) mustEmbedUnimplementedHelloServiceServer() {}

// UnsafeHelloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServiceServer will
// result in compilation errors.
type UnsafeHelloServiceServer interface {
	mustEmbedUnimplementedHelloServiceServer()
}

func RegisterHelloServiceServer(s grpc.ServiceRegistrar, srv HelloServiceServer) {
	s.RegisterService(&HelloService_ServiceDesc, srv)
}

func _HelloService_SendPicture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).SendPicture(&helloServiceSendPictureServer{stream})
}

type HelloService_SendPictureServer interface {
	SendAndClose(*Response) error
	Recv() (*Picture, error)
	grpc.ServerStream
}

type helloServiceSendPictureServer struct {
	grpc.ServerStream
}

func (x *helloServiceSendPictureServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceSendPictureServer) Recv() (*Picture, error) {
	m := new(Picture)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloService_ServiceDesc is the grpc.ServiceDesc for HelloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPicture",
			Handler:       _HelloService_SendPicture_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/grpc.proto",
}
